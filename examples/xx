Welcome to Coq 8.7.0 (October 2017)

Coq < [Loading ML file theplug.cmxs ... done]

Coq < Coq < Coq < Coq < Coq < Coq < Coq < beq is defined
beq is recursively defined (decreasing on 1st argument)

Coq < Coq < Coq < Coq < Coq < Coq < Coq < blt is defined
blt is recursively defined (decreasing on 1st argument)

Coq < Coq < 1 subgoal
  
  ============================
  EQ beq

trAC_Class < 1 subgoal
  
  ============================
  EQ beq

trAC_Class < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 EQ beq
You need to go back and solve them.

trAC_Class < trAC_Class is declared

Coq < Coq < 1 subgoal
  
  ============================
  TO beq blt

th_lt < 1 subgoal
  
  ============================
  TO beq blt

th_lt < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 TO beq blt
You need to go back and solve them.

th_lt < th_lt is declared

Coq < Coq < Coq < Coq < Coq < to1 is defined

Coq < Coq < build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
(Prod (Name x) (Name nat) (Prod (Name y) (Name nat) (App (Name eq) (Name bool) (App (Definition Top.blt (Fix (Functions ((Name blt) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name x) (Name nat) (Construct (Name bool) 1)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name blt) (Name x) (Name y)))))))))))) 0)) (Name x) (Name y)) (Construct (Name bool) 1))))
Coq < Coq < Coq < Coq < Coq < Coq < Coq < 1 subgoal
  
  ============================
  forall x y : nat, (negb (beq x y) && negb (blt x y))%bool = true

test2 < 1 subgoal
  
  ============================
  forall x y : nat, (negb (beq x y) && negb (blt x y))%bool = true

test2 < arewrite: CLEARING CACHE
typeclasses: Test

typeclasses: Top.to1
print_full_pure_context: Lookup 3
print_full_pure_context: Lookup 4
print_full_pure_context: Lookup 3
print_full_pure_context: Lookup 4
print_full_pure_context: Lookup 3
print_full_pure_context: Lookup 4
print_full_pure_context: Lookup 3
print_full_pure_context: Lookup 4
print_full_pure_context: Lookup 3
print_full_pure_context: Lookup 4
arewrite: Environment:

Compiling Library Top Top <>
Unknown REQUIRE Top._2
Unknown TOKEN Top._4

Unknown TOKEN Top._5
Unknown REQUIRE Top._3
Unknown REQUIRE Top._6

Unknown REQUIRE Top._7

Definition beq  : nat -> nat -> bool
 := fix beq (a b : nat) {struct a} : bool :=
      match a with
      | 0 => match b with
             | 0 => true
             | S _ => false
             end
      | S x => match b with
               | 0 => false
               | S y => beq x y
               end
      end.

Unknown IMPLICITS Top._8
Unknown HEAD Top._9
Unknown ARGUMENTS-SCOPE Top._10

Definition blt  : nat -> nat -> bool
 := fix blt (a b : nat) {struct a} : bool :=
      match a with
      | 0 => match b with
             | 0 => false
             | S _ => true
             end
      | S x => match b with
               | 0 => false
               | S y => blt x y
               end
      end.

Unknown IMPLICITS Top._11
Unknown HEAD Top._12

Unknown ARGUMENTS-SCOPE Top._13

Parameter trAC_Class : EQ beq.

Unknown IMPLICITS Top._14
Unknown HEAD Top._15

Unknown ARGUMENTS-SCOPE Top._16

Parameter th_lt : TO beq blt.

Unknown IMPLICITS Top._17
Unknown HEAD Top._18

Unknown ARGUMENTS-SCOPE Top._19

Definition to1  : TO_PROP beq blt := {| toProp := th_lt |}.

Unknown IMPLICITS Top._20
Unknown HEAD Top._21

Unknown ARGUMENTS-SCOPE Top._22
Unknown type classes instances state Top._23

Unknown AUTOHINT Top._24

END


build_rewrite_env: build_rewrite_env UNKNOWN AUTOHINT
build_rewrite_env: build_rewrite_env UNKNOWN type classes instances state
build_rewrite_env: build_rewrite_env UNKNOWN ARGUMENTS-SCOPE
build_rewrite_env: build_rewrite_env UNKNOWN HEAD
build_rewrite_env: build_rewrite_env UNKNOWN IMPLICITS
build_rewrite_env: HERE build_rewrite_env
build_exp: App
build_exp: Ind

build_exp: Const
get_def: Finding Top.beq
get_def: Failed
build_exp: Fix
build_exp: prod
build_exp: Ind

build_exp: prod
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: lambda
build_exp: Ind

build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 1

build_exp: lambda
build_exp: Ind

build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

build_exp: lambda
build_exp: Ind

build_exp: App
build_exp: Here 3
build_exp: rel
build_exp: rel
build_exp: rel
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn a => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
add_def: Adding Top.beq
build_exp: Const
get_def: Finding Top.blt
get_def: Failed
build_exp: Fix
build_exp: prod
build_exp: Ind

build_exp: prod
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: lambda
build_exp: Ind

build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

build_exp: lambda
build_exp: Ind

build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 1

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

build_exp: lambda
build_exp: Ind

build_exp: App
build_exp: Here 3
build_exp: rel
build_exp: rel
build_exp: rel
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn a => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
add_def: Adding Top.blt
build_exp: Const
get_def: Finding Top.th_lt
get_def: Failed
add_def: Adding Top.th_lt
add_constr: Adding C_AdvancedRewrite.advancedRewrite.TO_PROP1
build_exp: Here2

build_rewrite_env: DEF C_AdvancedRewrite.advancedRewrite.TO_PROP1(C_Coq.Init.Datatypes.nat, f_Top.beq(), f_Top.blt(), f_Top.th_lt())
build_rewrite_env: AST: 
build_ast: App
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (AdvancedRewrite.advancedRewrite.TO_PROP)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: App
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Lambda
build_ast: Sort
build_ast: Lambda
build_ast: Prod
build_ast: Rel
build_ast: Prod
build_ast: Rel
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Prod
build_ast: Rel
build_ast: Prod
build_ast: Rel
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.and)
build_ast: Prod
build_ast: Rel
build_ast: Prod
build_ast: Rel
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.or)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.and)
build_ast: Prod
build_ast: Rel
build_ast: Prod
build_ast: Rel
build_ast: Prod
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.and)
build_ast: Prod
build_ast: Rel
build_ast: Prod
build_ast: Rel
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.or)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.or)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Prod
build_ast: Rel
build_ast: Prod
build_ast: Rel
build_ast: Prod
build_ast: Rel
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.or)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.or)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_rewrite_env: (App (Construct (Name TO_PROP) 1) (Name nat) (Definition Top.beq (Fix (Functions ((Name beq) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 1) (Lambda (Name n) (Name nat) (Construct (Name bool) 2)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name beq) (Name x) (Name y)))))))))))) 0)) (Definition Top.blt (Fix (Functions ((Name blt) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name x) (Name nat) (Construct (Name bool) 1)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name blt) (Name x) (Name y)))))))))))) 0)) (Axiom Top.th_lt (App (Definition AdvancedRewrite.advancedRewrite.TO (Lambda (Name t) (Sort (Type (Universe (Level AdvancedRewrite.advancedRewrite.45)))) (Lambda (Name eq) (Prod (Anonymous) (Name t) (Prod (Anonymous) (Name t) (Name bool))) (Lambda (Name to) (Prod (Anonymous) (Name t) (Prod (Anonymous) (Name t) (Name bool))) (App (Name and) (Prod (Name x) (Name t) (Prod (Name y) (Name t) (App (Name or) (App (Name eq) (Name bool) (App (Name to) (Name x) (Name y)) (Construct (Name bool) 2)) (App (Name eq) (Name bool) (App (Name to) (Name y) (Name x)) (Construct (Name bool) 2))))) (App (Name and) (Prod (Name x) (Name t) (Prod (Name y) (Name t) (Prod (Anonymous) (App (Name eq) (Name bool) (App (Name eq) (Name x) (Name y)) (Construct (Name bool) 1)) (App (Name eq) (Name bool) (App (Name to) (Name x) (Name y)) (Construct (Name bool) 2))))) (App (Name and) (Prod (Name x) (Name t) (Prod (Name y) (Name t) (App (Name or) (App (Name eq) (Name bool) (App (Name eq) (Name x) (Name y)) (Construct (Name bool) 1)) (App (Name or) (App (Name eq) (Name bool) (App (Name to) (Name x) (Name y)) (Construct (Name bool) 1)) (App (Name eq) (Name bool) (App (Name to) (Name y) (Name x)) (Construct (Name bool) 1)))))) (Prod (Name x) (Name t) (Prod (Name y) (Name t) (Prod (Name z) (Name t) (App (Name or) (App (Name eq) (Name bool) (App (Name to) (Name x) (Name y)) (Construct (Name bool) 2)) (App (Name or) (App (Name eq) (Name bool) (App (Name to) (Name y) (Name z)) (Construct (Name bool) 2)) (App (Name eq) (Name bool) (App (Name to) (Name x) (Name z)) (Construct (Name bool) 1)))))))))))))) (Name nat) (Definition Top.beq (Fix (Functions ((Name beq) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 1) (Lambda (Name n) (Name nat) (Construct (Name bool) 2)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name beq) (Name x) (Name y)))))))))))) 0)) (Definition Top.blt (Fix (Functions ((Name blt) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name x) (Name nat) (Construct (Name bool) 1)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name blt) (Name x) (Name y)))))))))))) 0)))))
build_exp: App
build_exp: Ind

build_exp: Const
get_def: Finding Top.beq
build_exp: Const
get_def: Finding Top.blt
build_exp: Const
get_def: Finding Top.th_lt
add_constr: Adding C_AdvancedRewrite.advancedRewrite.TO_PROP1
build_exp: Here2

process_def: process_def C_AdvancedRewrite.advancedRewrite.TO_PROP1(C_Coq.Init.Datatypes.nat, f_Top.beq(), f_Top.blt(), f_Top.th_lt())
build_rewrite_env: build_rewrite_env UNKNOWN ARGUMENTS-SCOPE
build_rewrite_env: build_rewrite_env UNKNOWN HEAD
build_rewrite_env: build_rewrite_env UNKNOWN IMPLICITS
build_rewrite_env: HERE build_rewrite_env
build_exp: App
build_exp: Here 3
build_exp: Ind

build_exp: Const
get_def: Finding Top.beq
build_exp: Const
get_def: Finding Top.blt
build_exp: Here 3a

build_rewrite_env: Parsed f_AdvancedRewrite.advancedRewrite.TO(C_Coq.Init.Datatypes.nat, f_Top.beq(), f_Top.blt())
build_exp: App
build_exp: Here 3
build_exp: Ind

build_exp: Const
get_def: Finding Top.beq
build_exp: Const
get_def: Finding Top.blt
build_exp: Here 3a

process_property: Property f_AdvancedRewrite.advancedRewrite.TO(C_Coq.Init.Datatypes.nat, f_Top.beq(), f_Top.blt())
process_property: Root Property f_AdvancedRewrite.advancedRewrite.TO(C_Coq.Init.Datatypes.nat, f_Top.beq(), f_Top.blt())
build_rewrite_env: build_rewrite_env UNKNOWN ARGUMENTS-SCOPE
build_rewrite_env: build_rewrite_env UNKNOWN HEAD
build_rewrite_env: build_rewrite_env UNKNOWN IMPLICITS
build_rewrite_env: HERE build_rewrite_env
build_exp: App
build_exp: Here 3
build_exp: Ind

build_exp: Const
get_def: Finding Top.beq
build_exp: Here 3a

build_rewrite_env: Parsed f_AdvancedRewrite.advancedRewrite.EQ(C_Coq.Init.Datatypes.nat, f_Top.beq())
build_exp: App
build_exp: Here 3
build_exp: Ind

build_exp: Const
get_def: Finding Top.beq
build_exp: Here 3a

process_property: Property f_AdvancedRewrite.advancedRewrite.EQ(C_Coq.Init.Datatypes.nat, f_Top.beq())
process_property: Root Property f_AdvancedRewrite.advancedRewrite.EQ(C_Coq.Init.Datatypes.nat, f_Top.beq())
build_rewrite_env: build_rewrite_env UNKNOWN ARGUMENTS-SCOPE
build_rewrite_env: build_rewrite_env UNKNOWN HEAD
build_rewrite_env: build_rewrite_env UNKNOWN IMPLICITS
build_rewrite_env: HERE build_rewrite_env
build_exp: Fix
build_exp: prod
build_exp: Ind

build_exp: prod
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: lambda
build_exp: Ind

build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

build_exp: lambda
build_exp: Ind

build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 1

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

build_exp: lambda
build_exp: Ind

build_exp: App
build_exp: Here 3
build_exp: rel
build_exp: rel
build_exp: rel
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn a => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_rewrite_env: DEF fix(Functions((Name blt)(0, ALL(a:C_Coq.Init.Datatypes.nat: True) ALL(b:C_Coq.Init.Datatypes.nat: True) C_Coq.Init.Datatypes.bool, (fn a => (fn b => (CASE a OF C_Coq.Init.Datatypes.nat1 => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(x) => True) ||| C_Coq.Init.Datatypes.nat2(x) => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(y) => apply(blt, x, y))))))), 0)
build_rewrite_env: AST: 
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_rewrite_env: (Fix (Functions ((Name blt) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name x) (Name nat) (Construct (Name bool) 1)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name blt) (Name x) (Name y)))))))))))) 0)
build_exp: Fix
build_exp: prod
build_exp: Ind

build_exp: prod
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: lambda
build_exp: Ind

build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

build_exp: lambda
build_exp: Ind

build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 1

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

build_exp: lambda
build_exp: Ind

build_exp: App
build_exp: Here 3
build_exp: rel
build_exp: rel
build_exp: rel
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn a => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
process_def: process_def fix(Functions((Name blt)(0, ALL(a:C_Coq.Init.Datatypes.nat: True) ALL(b:C_Coq.Init.Datatypes.nat: True) C_Coq.Init.Datatypes.bool, (fn a => (fn b => (CASE a OF C_Coq.Init.Datatypes.nat1 => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(x) => True) ||| C_Coq.Init.Datatypes.nat2(x) => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(y) => apply(blt, x, y))))))), 0)
process_def: Name: blt
Core: (CASE a OF C_Coq.Init.Datatypes.nat1 => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(x) => True) ||| C_Coq.Init.Datatypes.nat2(x) => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(y) => f_Top.blt(x, y)))
process_var_core: The syms of f_Top.blt (CASE a OF C_Coq.Init.Datatypes.nat1 => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(x) => True) ||| C_Coq.Init.Datatypes.nat2(x) => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(y) => f_Top.blt(x, y)))
process_var_core: Sym: blt

process_var_core: Rule: f_Top.blt(C_Coq.Init.Datatypes.nat1, C_Coq.Init.Datatypes.nat1) { True } -> False
process_var_core: Rule: f_Top.blt(C_Coq.Init.Datatypes.nat1, C_Coq.Init.Datatypes.nat2(x)) { True } -> True
process_var_core: Rule: f_Top.blt(C_Coq.Init.Datatypes.nat2(x), C_Coq.Init.Datatypes.nat1) { True } -> False
process_var_core: Rule: f_Top.blt(C_Coq.Init.Datatypes.nat2(x), C_Coq.Init.Datatypes.nat2(y)) { True } -> f_Top.blt(x, y)
build_rewrite_env: build_rewrite_env UNKNOWN ARGUMENTS-SCOPE
build_rewrite_env: build_rewrite_env UNKNOWN HEAD
build_rewrite_env: build_rewrite_env UNKNOWN IMPLICITS
build_rewrite_env: HERE build_rewrite_env
build_exp: Fix
build_exp: prod
build_exp: Ind

build_exp: prod
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: lambda
build_exp: Ind

build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 1

build_exp: lambda
build_exp: Ind

build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

build_exp: lambda
build_exp: Ind

build_exp: App
build_exp: Here 3
build_exp: rel
build_exp: rel
build_exp: rel
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn a => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_rewrite_env: DEF fix(Functions((Name beq)(0, ALL(a:C_Coq.Init.Datatypes.nat: True) ALL(b:C_Coq.Init.Datatypes.nat: True) C_Coq.Init.Datatypes.bool, (fn a => (fn b => (CASE a OF C_Coq.Init.Datatypes.nat1 => (CASE b OF C_Coq.Init.Datatypes.nat1 => True ||| C_Coq.Init.Datatypes.nat2(n) => False) ||| C_Coq.Init.Datatypes.nat2(x) => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(y) => apply(beq, x, y))))))), 0)
build_rewrite_env: AST: 
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_rewrite_env: (Fix (Functions ((Name beq) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 1) (Lambda (Name n) (Name nat) (Construct (Name bool) 2)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name beq) (Name x) (Name y)))))))))))) 0)
build_exp: Fix
build_exp: prod
build_exp: Ind

build_exp: prod
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: lambda
build_exp: Ind

build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 1

build_exp: lambda
build_exp: Ind

build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
build_exp: lambda
build_exp: Ind

build_exp: Case
build_exp: lambda
build_exp: Ind

build_exp: Ind

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_exp: rel
build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 2

build_exp: lambda
build_exp: Ind

build_exp: App
build_exp: Here 3
build_exp: rel
build_exp: rel
build_exp: rel
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn b => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
build_case_exp: C_Coq.Init.Datatypes.nat
build_case: CASE TYPE C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type (fn a => C_Coq.Init.Datatypes.bool)
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
process_def: process_def fix(Functions((Name beq)(0, ALL(a:C_Coq.Init.Datatypes.nat: True) ALL(b:C_Coq.Init.Datatypes.nat: True) C_Coq.Init.Datatypes.bool, (fn a => (fn b => (CASE a OF C_Coq.Init.Datatypes.nat1 => (CASE b OF C_Coq.Init.Datatypes.nat1 => True ||| C_Coq.Init.Datatypes.nat2(n) => False) ||| C_Coq.Init.Datatypes.nat2(x) => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(y) => apply(beq, x, y))))))), 0)
process_def: Name: beq
Core: (CASE a OF C_Coq.Init.Datatypes.nat1 => (CASE b OF C_Coq.Init.Datatypes.nat1 => True ||| C_Coq.Init.Datatypes.nat2(n) => False) ||| C_Coq.Init.Datatypes.nat2(x) => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(y) => f_Top.beq(x, y)))
process_var_core: The syms of f_Top.beq (CASE a OF C_Coq.Init.Datatypes.nat1 => (CASE b OF C_Coq.Init.Datatypes.nat1 => True ||| C_Coq.Init.Datatypes.nat2(n) => False) ||| C_Coq.Init.Datatypes.nat2(x) => (CASE b OF C_Coq.Init.Datatypes.nat1 => False ||| C_Coq.Init.Datatypes.nat2(y) => f_Top.beq(x, y)))
process_var_core: Sym: beq

process_var_core: Rule: f_Top.beq(C_Coq.Init.Datatypes.nat1, C_Coq.Init.Datatypes.nat1) { True } -> True
process_var_core: Rule: f_Top.beq(C_Coq.Init.Datatypes.nat1, C_Coq.Init.Datatypes.nat2(n)) { True } -> False
process_var_core: Rule: f_Top.beq(C_Coq.Init.Datatypes.nat2(x), C_Coq.Init.Datatypes.nat1) { True } -> False
process_var_core: Rule: f_Top.beq(C_Coq.Init.Datatypes.nat2(x), C_Coq.Init.Datatypes.nat2(y)) { True } -> f_Top.beq(x, y)
build_rewrite_env: build_rewrite_env UNKNOWN REQUIRE
build_rewrite_env: build_rewrite_env UNKNOWN REQUIRE
build_rewrite_env: build_rewrite_env UNKNOWN REQUIRE
build_rewrite_env: build_rewrite_env UNKNOWN TOKEN
build_rewrite_env: build_rewrite_env UNKNOWN TOKEN
build_rewrite_env: build_rewrite_env UNKNOWN REQUIRE
typeclasses: Top.to1
build_exp: App
build_exp: Ind

build_exp: Const
get_def: Finding Top.beq
build_exp: Const
get_def: Finding Top.blt
build_exp: Const
get_def: Finding Top.th_lt
add_constr: Adding C_AdvancedRewrite.advancedRewrite.TO_PROP1
build_exp: Here2

typeclasses: Definition(Top.to1(C_AdvancedRewrite.advancedRewrite.TO_PROP1(C_Coq.Init.Datatypes.nat, f_Top.beq(), f_Top.blt(), f_Top.th_lt())))
typeclasses: TO f_Top.beq f_Top.blt
arewrite: ******* BEGIN *******
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: App
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
arewrite: (Prod (Name x) (Name nat) (Prod (Name y) (Name nat) (App (Name eq) (Name bool) (App (Definition Coq.Init.Datatypes.andb (Lambda (Name b1) (Name bool) (Lambda (Name b2) (Name bool) (Case 0 (Lambda (Name b1) (Name bool) (Name bool)) (CaseMatch (Name b1)) (CaseBranches (Name b2) (Construct (Name bool) 2)))))) (App (Definition Coq.Init.Datatypes.negb (Lambda (Name b) (Name bool) (Case 0 (Lambda (Name b) (Name bool) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Construct (Name bool) 1))))) (App (Definition Top.beq (Fix (Functions ((Name beq) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 1) (Lambda (Name n) (Name nat) (Construct (Name bool) 2)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name beq) (Name x) (Name y)))))))))))) 0)) (Name x) (Name y))) (App (Definition Coq.Init.Datatypes.negb (Lambda (Name b) (Name bool) (Case 0 (Lambda (Name b) (Name bool) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Construct (Name bool) 1))))) (App (Definition Top.blt (Fix (Functions ((Name blt) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name x) (Name nat) (Construct (Name bool) 1)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name blt) (Name x) (Name y)))))))))))) 0)) (Name x) (Name y)))) (Construct (Name bool) 1))))
arewrite: ******* END *******
build_exp: prod
build_exp: Ind

build_exp: prod
build_exp: Ind

build_exp: App
build_exp: Here 3
build_exp: Ind

build_exp: App
build_exp: Here 3
build_exp: App
build_exp: Here 3
build_exp: App
build_exp: Here 3
build_exp: rel
build_exp: rel
build_exp: Here 3a

build_exp: Here 3a

build_exp: App
build_exp: Here 3
build_exp: App
build_exp: Here 3
build_exp: rel
build_exp: rel
build_exp: Here 3a

build_exp: Here 3a

build_exp: Here 3a

build_exp: Construct
build_exp: s = Coq.Init.Datatypes.bool i = 1

arewrite: Ind s = Coq.Init.Logic.eq
build_exp: Here 3a

convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
convert_exp_to_type: Convert_exp_to_type C_Coq.Init.Datatypes.nat
arewrite: Rewriting 
arewrite: ALL(x:C_Coq.Init.Datatypes.nat: True) ALL(y:C_Coq.Init.Datatypes.nat: True) (not(f_Top.beq(x, y))  & not(f_Top.blt(x, y))) == True
arewrite: Simplifying CONCLUSION
arewrite: Result

arewrite: not(EXISTS(x:C_Coq.Init.Datatypes.nat) EXISTS(y:C_Coq.Init.Datatypes.nat) f_Top.blt(x, y))
build_predicate: build_evars
build_coq_type: HEREprod C_Coq.Init.Datatypes.nat
build_leaf_type: build leaf C_Coq.Init.Datatypes.nat
build_predicate: build_evars1 EXISTS(y:C_Coq.Init.Datatypes.nat) f_Top.blt(x, y)
build_predicate: Done evars
build_predicate: build_evars
build_coq_type: HEREprod C_Coq.Init.Datatypes.nat
build_leaf_type: build leaf C_Coq.Init.Datatypes.nat
build_predicate: build_evars1 f_Top.blt(x, y)
build_predicate: Done evars
build_predicate: Functor f_Top.blt
functor_from_name: functor_from_name f_Top.blt
functor_from_name: root Top.blt
get_constr: Finding f_Top.blt
get_constr: Failed
functor_from_name: initing blt
functor_from_name: DONE

is_bool_type: Called
get_type: type_from_name call
get_constr: Finding f_Top.blt
get_constr: Failed
get_def: Finding Top.blt
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
type_from_name: (Fix (Functions ((Name blt) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name x) (Name nat) (Construct (Name bool) 1)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name blt) (Name x) (Name y)))))))))))) 0)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
type_from_name: (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool)))
type_from_name: Done
is_bool_type: Called1
is_bool_type: Called2 (Coq.Init.Datatypes.bool)
build_predicate: bool equality
build_predicate: build_evars2
build_predicate: build_evars3
build_predicate: end build_evars
build_predicate: build_evars2
build_predicate: build_evars3
build_predicate: end build_evars
arewrite: Built predicate

build_ast: Prod
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.ex)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.ex)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.eq)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: App
build_ast: Const
build_const: Lookup 1
build_const: Lookup 2
build_ast: Fix
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Prod
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Case
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Rel
build_ast: Construct
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.bool)
build_ast: Lambda
build_ast: Ind
lookup_mutind_body: (Coq.Init.Datatypes.nat)
build_ast: App
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Rel
build_ast: Ind
lookup_mutind_body: (Coq.Init.Logic.False)
arewrite: (Prod (Anonymous) (App (Name ex) (Name nat) (Lambda (Name x) (Name nat) (App (Name ex) (Name nat) (Lambda (Name y) (Name nat) (App (Name eq) (Name bool) (Construct (Name bool) 1) (App (Definition Top.blt (Fix (Functions ((Name blt) 0 (Prod (Name a) (Name nat) (Prod (Name b) (Name nat) (Name bool))) (Lambda (Name a) (Name nat) (Lambda (Name b) (Name nat) (Case 0 (Lambda (Name a) (Name nat) (Name bool)) (CaseMatch (Name a)) (CaseBranches (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name x) (Name nat) (Construct (Name bool) 1)))) (Lambda (Name x) (Name nat) (Case 0 (Lambda (Name b) (Name nat) (Name bool)) (CaseMatch (Name b)) (CaseBranches (Construct (Name bool) 2) (Lambda (Name y) (Name nat) (App (Name blt) (Name x) (Name y)))))))))))) 0)) (Name x) (Name y))))))) (Name False))

arewrite: End


2 subgoals
  
  ============================
  (exists x y : nat, true = blt x y) -> False

subgoal 2 is:
 ((exists x y : nat, true = blt x y) -> False) =
 (forall x y : nat, (negb (beq x y) && negb (blt x y))%bool = true)

test2 < 
Coq < 
