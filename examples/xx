Welcome to Coq 8.7.0 (October 2017)

Coq < 
Coq < [Loading ML file theplug.cmxs ... done]

Coq < Coq < heap is defined

Coq < Coq < state is defined

Coq < Coq < pointsTo is defined

Coq < Coq < Coq < Coq < Coq < Coq < Coq < star is defined

Coq < Coq < Coq < Coq < Coq < Coq < Coq < magicWand is defined

Coq < Coq < empty is defined

Coq < Coq < dd is defined
dd is recursively defined (decreasing on 1st argument)

Coq < Coq < 1 subgoal
  
  ============================
  AC star

starAC < 1 subgoal
  
  ============================
  AC star

starAC < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 AC star
You need to go back and solve them.

starAC < starAC is declared

Coq < Coq < 1 subgoal
  
  ============================
  forall x : state, REWRITE_RULE (star x empty) x True

rewriteEmpty < 1 subgoal
  
  ============================
  forall x : state, REWRITE_RULE (star x empty) x True

rewriteEmpty < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall x : state, REWRITE_RULE (star x empty) x True
You need to go back and solve them.

rewriteEmpty < rewriteEmpty is declared

Coq < Coq < 1 subgoal
  
  ============================
  forall (x : state) (h : nat -> option nat),
  REWRITE_RULE (star x empty h) (x h) True

rewriteEmpty_h < 1 subgoal
  
  ============================
  forall (x : state) (h : nat -> option nat),
  REWRITE_RULE (star x empty h) (x h) True

rewriteEmpty_h < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall (x : state) (h : nat -> option nat),
 REWRITE_RULE (star x empty h) (x h) True
You need to go back and solve them.

rewriteEmpty_h < rewriteEmpty_h is declared

Coq < Coq < Coq < 1 subgoal
  
  ============================
  forall l r x : state,
  REWRITE_RULE (magicWand (star l x) (star r x)) (magicWand l r) True

wandTermElim1 < 1 subgoal
  
  ============================
  forall l r x : state,
  REWRITE_RULE (magicWand (star l x) (star r x)) (magicWand l r) True

wandTermElim1 < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall l r x : state,
 REWRITE_RULE (magicWand (star l x) (star r x)) (magicWand l r) True
You need to go back and solve them.

wandTermElim1 < wandTermElim1 is declared

Coq < Coq < Coq < 1 subgoal
  
  ============================
  forall (l r x : state) (h : nat -> option nat),
  REWRITE_RULE (magicWand (star l x) (star r x) h) (magicWand l r h) True

wandTermElim1_h < 1 subgoal
  
  ============================
  forall (l r x : state) (h : nat -> option nat),
  REWRITE_RULE (magicWand (star l x) (star r x) h) (magicWand l r h) True

wandTermElim1_h < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall (l r x : state) (h : nat -> option nat),
 REWRITE_RULE (magicWand (star l x) (star r x) h) (magicWand l r h) True
You need to go back and solve them.

wandTermElim1_h < wandTermElim1_h is declared

Coq < Coq < 1 subgoal
  
  ============================
  forall l x : state, REWRITE_RULE (magicWand (star l x) x) l True

wandElim1 < 1 subgoal
  
  ============================
  forall l x : state, REWRITE_RULE (magicWand (star l x) x) l True

wandElim1 < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall l x : state, REWRITE_RULE (magicWand (star l x) x) l True
You need to go back and solve them.

wandElim1 < wandElim1 is declared

Coq < Coq < 1 subgoal
  
  ============================
  forall (l x : state) (h : nat -> option nat),
  REWRITE_RULE (magicWand (star l x) x h) (l h) True

wandElim1_h < 1 subgoal
  
  ============================
  forall (l x : state) (h : nat -> option nat),
  REWRITE_RULE (magicWand (star l x) x h) (l h) True

wandElim1_h < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall (l x : state) (h : nat -> option nat),
 REWRITE_RULE (magicWand (star l x) x h) (l h) True
You need to go back and solve them.

wandElim1_h < wandElim1_h is declared

Coq < Coq < Coq < 1 subgoal
  
  ============================
  forall x : state, REWRITE_RULE (magicWand x x) empty True

wandElim2 < 1 subgoal
  
  ============================
  forall x : state, REWRITE_RULE (magicWand x x) empty True

wandElim2 < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall x : state, REWRITE_RULE (magicWand x x) empty True
You need to go back and solve them.

wandElim2 < wandElim2 is declared

Coq < Coq < Coq < 1 subgoal
  
  ============================
  forall (x : state) (h : nat -> option nat),
  REWRITE_RULE (magicWand x x h) (empty h) True

wandElim2_h < 1 subgoal
  
  ============================
  forall (x : state) (h : nat -> option nat),
  REWRITE_RULE (magicWand x x h) (empty h) True

wandElim2_h < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall (x : state) (h : nat -> option nat),
 REWRITE_RULE (magicWand x x h) (empty h) True
You need to go back and solve them.

wandElim2_h < wandElim2_h is declared

Coq < Coq < Coq < 1 subgoal
  
  ============================
  forall x : state, REWRITE_RULE (magicWand x empty) x True

wandElim3 < 1 subgoal
  
  ============================
  forall x : state, REWRITE_RULE (magicWand x empty) x True

wandElim3 < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall x : state, REWRITE_RULE (magicWand x empty) x True
You need to go back and solve them.

wandElim3 < wandElim3 is declared

Coq < Coq < Coq < 1 subgoal
  
  ============================
  forall (x : state) (h : nat -> option nat),
  REWRITE_RULE (magicWand x empty h) (x h) True

wandElim3_h < 1 subgoal
  
  ============================
  forall (x : state) (h : nat -> option nat),
  REWRITE_RULE (magicWand x empty h) (x h) True

wandElim3_h < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall (x : state) (h : nat -> option nat),
 REWRITE_RULE (magicWand x empty h) (x h) True
You need to go back and solve them.

wandElim3_h < wandElim3_h is declared

Coq < Coq < 1 subgoal
  
  ============================
  forall (a : state) (h : nat -> option nat), star a empty h

test1 < 1 subgoal
  
  ============================
  forall (a : state) (h : nat -> option nat), star a empty h

test1 < HERE4
HERE4
s = Coq.Init.Datatypes.nat i = 1
s = Coq.Init.Datatypes.nat i = 1

2 subgoals
  
  ============================
  forall (a : state) (h : nat -> option nat), a h

subgoal 2 is:
 (forall (a : state) (h : nat -> option nat), a h) =
 (forall (a : state) (h : nat -> option nat), star a empty h)

test1 < test1 is declared

Coq < Coq < 1 subgoal
  
  ============================
  forall (a b c : state) (h : nat -> option nat),
  magicWand (star a (star b c)) b h

test2 < 1 subgoal
  
  ============================
  forall (a b c : state) (h : nat -> option nat),
  magicWand (star a (star b c)) b h

test2 < HERE4
HERE4
s = Coq.Init.Datatypes.nat i = 1
s = Coq.Init.Datatypes.nat i = 1

2 subgoals
  
  ============================
  forall (a c : state) (h : nat -> option nat), star a c h

subgoal 2 is:
 (forall (a c : state) (h : nat -> option nat), star a c h) =
 (forall (a b c : state) (h : nat -> option nat),
  magicWand (star a (star b c)) b h)

test2 < test2 is declared

Coq < Coq < 1 subgoal
  
  ============================
  forall (a b c : state) (h : nat -> option nat),
  magicWand (star a (star b c)) (star a b) h

test3 < 1 subgoal
  
  ============================
  forall (a b c : state) (h : nat -> option nat),
  magicWand (star a (star b c)) (star a b) h

test3 < HERE4
HERE4
s = Coq.Init.Datatypes.nat i = 1
s = Coq.Init.Datatypes.nat i = 1

2 subgoals
  
  ============================
  forall (c : state) (h : nat -> option nat), c h

subgoal 2 is:
 (forall (c : state) (h : nat -> option nat), c h) =
 (forall (a b c : state) (h : nat -> option nat),
  magicWand (star a (star b c)) (star a b) h)

test3 < test3 is declared

Coq < Coq < 1 subgoal
  
  ============================
  forall (a b : state) (h : nat -> option nat), magicWand (star b a) a h

test4 < 1 subgoal
  
  ============================
  forall (a b : state) (h : nat -> option nat), magicWand (star b a) a h

test4 < HERE4
HERE4
s = Coq.Init.Datatypes.nat i = 1
s = Coq.Init.Datatypes.nat i = 1

2 subgoals
  
  ============================
  forall (b : state) (h : nat -> option nat), b h

subgoal 2 is:
 (forall (b : state) (h : nat -> option nat), b h) =
 (forall (a b : state) (h : nat -> option nat), magicWand (star b a) a h)

test4 < test4 is declared

Coq < Coq < 1 subgoal
  
  ============================
  forall (a : state) (h : nat -> option nat), magicWand a a h

test5 < 1 subgoal
  
  ============================
  forall (a : state) (h : nat -> option nat), magicWand a a h

test5 < HERE4
s = Coq.Init.Datatypes.nat i = 1
s = Coq.Init.Datatypes.nat i = 1

2 subgoals
  
  ============================
  forall h : nat -> option nat, empty h

subgoal 2 is:
 (forall h : nat -> option nat, empty h) =
 (forall (a : state) (h : nat -> option nat), magicWand a a h)

test5 < test5 is declared

Coq < Coq < 1 subgoal
  
  ============================
  forall (a : state) (h : nat -> option nat), magicWand (star a empty) a h

test6 < 1 subgoal
  
  ============================
  forall (a : state) (h : nat -> option nat), magicWand (star a empty) a h

test6 < HERE4
s = Coq.Init.Datatypes.nat i = 1
s = Coq.Init.Datatypes.nat i = 1

2 subgoals
  
  ============================
  forall h : nat -> option nat, empty h

subgoal 2 is:
 (forall h : nat -> option nat, empty h) =
 (forall (a : state) (h : nat -> option nat), magicWand (star a empty) a h)

test6 < test6 is declared

Coq < Coq < Coq < 
