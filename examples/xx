Welcome to Coq 8.7.0 (October 2017)

Coq < [Loading ML file theplug.cmxs ... done]

Coq < 
Coq < Coq < 1 subgoal
  
  ============================
  forall a b c : list TriDigit,
  triAdd a (triAdd b c) = triAdd (triAdd a b) c /\ triAdd a b = triAdd b a

trAC_Class < 1 subgoal
  
  ============================
  forall a b c : list TriDigit,
  triAdd a (triAdd b c) = triAdd (triAdd a b) c /\ triAdd a b = triAdd b a

trAC_Class < No more subgoals, but there are some goals you gave up:

1 subgoal

subgoal 1 is:
 forall a b c : list TriDigit,
 triAdd a (triAdd b c) = triAdd (triAdd a b) c /\ triAdd a b = triAdd b a
You need to go back and solve them.

trAC_Class < trAC_Class is declared

Coq < Coq < Coq < Coq < Coq < tac2 is defined

Coq < Coq < 1 subgoal
  
  ============================
  1 + 1 = 3

x < 1 subgoal
  
  ============================
  1 + 1 = 3

x < typeclasses: Test

typeclasses: Coq.Classes.RelationClasses.equivalence_rewrite_relation
typeclasses: Coq.Classes.RelationClasses.RewriteRelation_instance_2
typeclasses: Coq.Classes.RelationClasses.RewriteRelation_instance_1
typeclasses: Coq.Classes.RelationClasses.RewriteRelation_instance_0
typeclasses: Coq.Arith.PeanoNat.Nat.lt_strorder
typeclasses: Coq.Classes.CRelationClasses.equivalence_rewrite_crelation
typeclasses: Coq.Classes.CRelationClasses.RewriteRelation_instance_2
typeclasses: Coq.Classes.CRelationClasses.RewriteRelation_instance_1
typeclasses: Coq.Classes.CRelationClasses.RewriteRelation_instance_0
typeclasses: Coq.Classes.RelationClasses.Equivalence_PER
typeclasses: Top.tac2
typeclasses: triclass.tac
typeclasses: Definition(triclass.tac(C_AdvancedRewrite.advancedRewrite.AC_PROP1(C_Coq.Init.Datatypes.list(C_triclass.TriDigit), f_triclass.triAdd(), f_triclass.trAC_Class())))
typeclasses: (Definition triclass.tac (App (Construct (Record ((Name AC_PROP) (inductive_body (Build_AC_PROP 1 (Prod (Name T) (Sort (Type (Universe (Level AdvancedRewrite.advancedRewrite.9)))) (Prod (Name f) (Prod (Anonymous) (Name T) (Prod (Anonymous) (Name T) (Name T))) (Prod (Name acProp) (Prod (Name a) (Name T) (Prod (Name b) (Name T) (Prod (Name c) (Name T) (App (Name and) (App (Name eq) (Name T) (App (Name f) (Name a) (App (Name f) (Name b) (Name c))) (App (Name f) (App (Name f) (Name a) (Name b)) (Name c))) (App (Name eq) (Name T) (App (Name f) (Name a) (Name b)) (App (Name f) (Name b) (Name a))))))) (App (Name AC_PROP) (Name T) (Name f))))))))) 1) (App (Inductive ((Name list) (inductive_body (nil 1 (Prod (Name A) (Sort (Type (Universe (Level Coq.Init.Datatypes.44)))) (App (Name list) (Name A)))) (cons 2 (Prod (Name A) (Sort (Type (Universe (Level Coq.Init.Datatypes.44)))) (Prod (Anonymous) (Name A) (Prod (Anonymous) (App (Name list) (Name A)) (App (Name list) (Name A))))))))) (Inductive ((Name TriDigit) (inductive_body (TriZero 1 (Name TriDigit)) (TriOne 2 (Name TriDigit)) (TriTwo 3 (Name TriDigit)))))) (Definition triclass.triAdd (Fix (Functions ((Name triAdd) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (Prod (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit)))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Lambda (Name y) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (Name y) (Lambda (Name t) (Name TriDigit) (Lambda (Name r1) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (Name r1)) (Lambda (Name f) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (App (Construct (Name list) 2) (Name TriDigit) (Name f) (App (Name triAdd) (Name r1) (Name r2))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2))) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2)))))))))))))))))))) 0)) (Axiom triclass.trAC_Class (Prod (Name a) (App (Name list) (Name TriDigit)) (Prod (Name b) (App (Name list) (Name TriDigit)) (Prod (Name c) (App (Name list) (Name TriDigit)) (App (Name and) (App (Name eq) (App (Name list) (Name TriDigit)) (App (Definition triclass.triAdd (Fix (Functions ((Name triAdd) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (Prod (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit)))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Lambda (Name y) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (Name y) (Lambda (Name t) (Name TriDigit) (Lambda (Name r1) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (Name r1)) (Lambda (Name f) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (App (Construct (Name list) 2) (Name TriDigit) (Name f) (App (Name triAdd) (Name r1) (Name r2))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2))) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2)))))))))))))))))))) 0)) (Name a) (App (Definition triclass.triAdd (Fix (Functions ((Name triAdd) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (Prod (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit)))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Lambda (Name y) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (Name y) (Lambda (Name t) (Name TriDigit) (Lambda (Name r1) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (Name r1)) (Lambda (Name f) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (App (Construct (Name list) 2) (Name TriDigit) (Name f) (App (Name triAdd) (Name r1) (Name r2))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2))) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2)))))))))))))))))))) 0)) (Name b) (Name c))) (App (Definition triclass.triAdd (Fix (Functions ((Name triAdd) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (Prod (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit)))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Lambda (Name y) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (Name y) (Lambda (Name t) (Name TriDigit) (Lambda (Name r1) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (Name r1)) (Lambda (Name f) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (App (Construct (Name list) 2) (Name TriDigit) (Name f) (App (Name triAdd) (Name r1) (Name r2))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2))) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2)))))))))))))))))))) 0)) (App (Definition triclass.triAdd (Fix (Functions ((Name triAdd) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (Prod (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit)))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Lambda (Name y) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (Name y) (Lambda (Name t) (Name TriDigit) (Lambda (Name r1) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (Name r1)) (Lambda (Name f) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (App (Construct (Name list) 2) (Name TriDigit) (Name f) (App (Name triAdd) (Name r1) (Name r2))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2))) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2)))))))))))))))))))) 0)) (Name a) (Name b)) (Name c))) (App (Name eq) (App (Name list) (Name TriDigit)) (App (Definition triclass.triAdd (Fix (Functions ((Name triAdd) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (Prod (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit)))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Lambda (Name y) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (Name y) (Lambda (Name t) (Name TriDigit) (Lambda (Name r1) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (Name r1)) (Lambda (Name f) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (App (Construct (Name list) 2) (Name TriDigit) (Name f) (App (Name triAdd) (Name r1) (Name r2))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2))) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2)))))))))))))))))))) 0)) (Name a) (Name b)) (App (Definition triclass.triAdd (Fix (Functions ((Name triAdd) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (Prod (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit)))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Lambda (Name y) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (Name y) (Lambda (Name t) (Name TriDigit) (Lambda (Name r1) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (Name r1)) (Lambda (Name f) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (App (Construct (Name list) 2) (Name TriDigit) (Name f) (App (Name triAdd) (Name r1) (Name r2))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2))) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))))))))) (Case 1 (Lambda (Name y) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name y)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r1)) (Lambda (Name t) (Name TriDigit) (Lambda (Name r2) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (App (Name triAdd) (Name r1) (Name r2))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triAdd) (Name r1) (Name r2)))) (App (Definition triclass.triIncrement (Fix (Functions ((Name triIncrement) 0 (Prod (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (Lambda (Name x) (App (Name list) (Name TriDigit)) (Case 1 (Lambda (Name x) (App (Name list) (Name TriDigit)) (App (Name list) (Name TriDigit))) (CaseMatch (Name x)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Construct (Name list) 1) (Name TriDigit))) (Lambda (Name t) (Name TriDigit) (Lambda (Name r) (App (Name list) (Name TriDigit)) (Case 0 (Lambda (Name t) (Name TriDigit) (App (Name list) (Name TriDigit))) (CaseMatch (Name t)) (CaseBranches (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 3) (Name r)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 1) (App (Name triIncrement) (Name r)))))))))))) 0)) (App (Construct (Name list) 2) (Name TriDigit) (Construct (Name TriDigit) 2) (App (Name triAdd) (Name r1) (Name r2)))))))))))))))))))) 0)) (Name b) (Name a))))))))))
typeclasses: Coq.Classes.RelationClasses.predicate_equivalence_equivalence
typeclasses: Coq.Classes.RelationClasses.relation_equivalence_equivalence
typeclasses: Coq.Classes.RelationClasses.eq_equivalence
typeclasses: Coq.Classes.Equivalence.pointwise_equivalence
typeclasses: Coq.Classes.RelationClasses.iff_equivalence
typeclasses: Coq.Arith.PeanoNat.Nat.eqf_equiv
typeclasses: Coq.Classes.CRelationClasses.Equivalence_PER
typeclasses: Coq.Classes.RelationClasses.relation_implication_preorder
typeclasses: Coq.Classes.RelationClasses.Equivalence_PreOrder
typeclasses: Coq.Classes.RelationClasses.predicate_implication_preorder
typeclasses: Coq.Arith.PeanoNat.Nat.le_preorder
typeclasses: Coq.Classes.CRelationClasses.relation_equivalence_equivalence
typeclasses: Coq.Classes.CRelationClasses.eq_equivalence
typeclasses: Coq.Classes.CRelationClasses.iff_equivalence
typeclasses: Coq.Classes.CRelationClasses.relation_implication_preorder
typeclasses: Coq.Classes.SetoidTactics.equivalence_default
typeclasses: Coq.Classes.CRelationClasses.partial_order_antisym
typeclasses: Coq.Classes.CRelationClasses.iffT_Symmetric
typeclasses: Coq.Classes.CRelationClasses.eq_Symmetric
typeclasses: Coq.Classes.CRelationClasses.Equivalence_Symmetric
typeclasses: Coq.Classes.CRelationClasses.PER_Symmetric
typeclasses: Coq.Classes.CRelationClasses.iff_Symmetric
typeclasses: Coq.Arith.PeanoNat.Nat.le_partialorder
typeclasses: Coq.Classes.RelationClasses.subrelation_partial_order
typeclasses: Coq.Classes.Morphisms.iff_impl_subrelation
typeclasses: Coq.Classes.Morphisms.iff_flip_impl_subrelation
typeclasses: Coq.Classes.Morphisms.pointwise_subrelation
typeclasses: Coq.Classes.RelationClasses.PER_Transitive
typeclasses: Coq.Classes.RelationClasses.PreOrder_Transitive
typeclasses: Coq.Classes.RelationClasses.iff_Transitive
typeclasses: Coq.Classes.RelationClasses.eq_Transitive
typeclasses: Coq.Classes.RelationClasses.Equivalence_Transitive
typeclasses: Coq.Classes.Equivalence.pointwise_transitive
typeclasses: Coq.Classes.Equivalence.equiv_transitive
typeclasses: Coq.Classes.RelationClasses.impl_Transitive
typeclasses: Coq.Classes.RelationClasses.StrictOrder_Transitive
typeclasses: Coq.Arith.PeanoNat.Nat.divide_transitive
typeclasses: Coq.Classes.CMorphisms.pointwise_subrelation
typeclasses: Coq.Classes.CMorphisms.iffT_arrow_subrelation
typeclasses: Coq.Classes.CMorphisms.iffT_flip_arrow_subrelation
typeclasses: Coq.Classes.CMorphisms.iff_impl_subrelation
typeclasses: Coq.Classes.CMorphisms.iff_flip_impl_subrelation
typeclasses: Coq.Classes.CMorphisms.trans_contra_co_type_morphism
typeclasses: Coq.Classes.CMorphisms.subrelation_id_proper
typeclasses: Coq.Classes.CMorphisms.proper_subrelation_proper_arrow
typeclasses: Coq.Classes.CMorphisms.trans_contra_inv_impl_type_morphism
typeclasses: Coq.Classes.CMorphisms.proper_proper
typeclasses: Coq.Classes.CMorphisms.trans_co_impl_type_morphism
typeclasses: Coq.Classes.CMorphisms.compose_proper
typeclasses: Coq.Classes.CMorphisms.trans_sym_co_inv_impl_type_morphism
typeclasses: Coq.Classes.CMorphisms.PartialOrder_proper_type
typeclasses: Coq.Classes.CMorphisms.trans_sym_contra_arrow_morphism
typeclasses: Coq.Classes.CMorphisms.respectful_morphism
typeclasses: Coq.Classes.CMorphisms.PER_type_morphism
typeclasses: Coq.Classes.CMorphisms.per_partial_app_type_morphism
typeclasses: Coq.Classes.CMorphisms.trans_co_eq_inv_arrow_morphism
typeclasses: Coq.Classes.CRelationClasses.impl_Transitive
typeclasses: Coq.Classes.CRelationClasses.StrictOrder_Transitive
typeclasses: Coq.Classes.CRelationClasses.PER_Transitive
typeclasses: Coq.Classes.CRelationClasses.PreOrder_Transitive
typeclasses: Coq.Classes.CRelationClasses.iff_Transitive
typeclasses: Coq.Classes.CRelationClasses.eq_Transitive
typeclasses: Coq.Classes.CRelationClasses.iffT_Transitive
typeclasses: Coq.Classes.CRelationClasses.arrow_Transitive
typeclasses: Coq.Classes.CRelationClasses.Equivalence_Transitive
typeclasses: Coq.Classes.RelationClasses.StrictOrder_Irreflexive
typeclasses: Coq.Classes.RelationClasses.StrictOrder_Asymmetric
typeclasses: Coq.Arith.PeanoNat.Nat.mul_wd
typeclasses: Coq.Arith.PeanoNat.Nat.mod_wd
typeclasses: Coq.Arith.PeanoNat.Nat.lor_wd
typeclasses: Coq.Arith.PeanoNat.Nat.lcm_wd
typeclasses: Coq.Arith.PeanoNat.Nat.gcd_wd
typeclasses: Coq.Arith.PeanoNat.Nat.div_wd
typeclasses: Coq.Arith.PeanoNat.Nat.add_wd
typeclasses: Coq.Arith.PeanoNat.Nat.lt_alt_wd
typeclasses: Coq.Arith.PeanoNat.Nat.Odd_wd
typeclasses: Coq.Arith.PeanoNat.Nat.pred_wd
typeclasses: Coq.Arith.PeanoNat.Nat.min_compat
typeclasses: Coq.Classes.Morphisms_Prop.iff_iff_iff_impl_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.ones_wd
typeclasses: Coq.Arith.PeanoNat.Nat.sqrt_up_wd
typeclasses: Coq.Classes.Morphisms.proper_subrelation_proper
typeclasses: Coq.Classes.Morphisms_Prop.or_iff_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.Proper_instance_0
typeclasses: Coq.Arith.PeanoNat.Nat.lxor_wd
typeclasses: Coq.Arith.PeanoNat.Nat.Private_NZSqrt.sqrt_wd
typeclasses: Coq.Arith.PeanoNat.Nat.lt_wd
typeclasses: Coq.Arith.PeanoNat.Nat.le_wd
typeclasses: Coq.Classes.Morphisms_Prop.ex_flip_impl_morphism
typeclasses: Coq.Classes.Morphisms.PartialOrder_proper
typeclasses: Coq.Arith.PeanoNat.Nat.log2_wd
typeclasses: Coq.Arith.PeanoNat.Nat.lnot_wd
typeclasses: Coq.Arith.PeanoNat.Nat.land_wd
typeclasses: Coq.Arith.PeanoNat.Nat.max_compat
typeclasses: Coq.Classes.Morphisms.subrelation_id_proper
typeclasses: Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism
typeclasses: Coq.Classes.Morphisms.trans_contra_inv_impl_morphism
typeclasses: Coq.Classes.Morphisms_Prop.and_impl_morphism
typeclasses: Coq.Classes.Morphisms.proper_proper
typeclasses: Coq.Arith.PeanoNat.Nat.recursion_wd
typeclasses: Coq.Classes.Morphisms_Prop.Acc_rel_morphism
typeclasses: Coq.Classes.Morphisms_Prop.not_iff_morphism
typeclasses: Coq.Classes.Morphisms.compose_proper
typeclasses: Coq.Classes.Morphisms.PER_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.le_alt_wd
typeclasses: Coq.Arith.PeanoNat.Nat.log2_up_wd
typeclasses: Coq.Classes.Morphisms_Prop.all_impl_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.even_wd
typeclasses: Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism
typeclasses: Coq.Classes.Morphisms.trans_sym_contra_impl_morphism
typeclasses: Coq.Classes.Morphisms_Prop.ex_iff_morphism
typeclasses: Coq.Classes.Morphisms.per_partial_app_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.testbit_wd
typeclasses: Coq.Arith.PeanoNat.Nat.div2_wd
typeclasses: Coq.Arith.PeanoNat.Nat.Bezout_wd
typeclasses: Coq.Classes.Morphisms.respectful_morphism
typeclasses: Coq.Classes.Morphisms.trans_co_impl_morphism
typeclasses: Coq.Classes.Morphisms.trans_contra_co_morphism
typeclasses: Coq.Classes.Morphisms_Prop.Acc_pt_morphism
typeclasses: Coq.Classes.Morphisms_Prop.all_iff_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.divide_wd
typeclasses: Coq.Arith.PeanoNat.Nat.ldiff_wd
typeclasses: Coq.Classes.Morphisms_Prop.not_impl_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.eqb_compat
typeclasses: Coq.Classes.Morphisms_Prop.ex_impl_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.b2n_proper
typeclasses: Coq.Classes.Morphisms_Prop.and_iff_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.clearbit_wd
typeclasses: Coq.Arith.PeanoNat.Nat.shiftr_wd
typeclasses: Coq.Arith.PeanoNat.Nat.shiftl_wd
typeclasses: Coq.Arith.PeanoNat.Nat.setbit_wd
typeclasses: Coq.Arith.PeanoNat.Nat.succ_wd
typeclasses: Coq.Arith.PeanoNat.Nat.Even_wd
typeclasses: Coq.Classes.Morphisms_Prop.or_impl_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.testbit_eqf
typeclasses: Coq.Classes.Morphisms_Prop.well_founded_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.sub_wd
typeclasses: Coq.Arith.PeanoNat.Nat.pow_wd
typeclasses: Coq.Arith.PeanoNat.Nat.odd_wd
typeclasses: Coq.Classes.Morphisms_Prop.all_flip_impl_morphism
typeclasses: Coq.Classes.CRelationClasses.StrictOrder_Irreflexive
typeclasses: Coq.Classes.CRelationClasses.StrictOrder_Asymmetric
typeclasses: Coq.Classes.Morphisms.reflexive_eq_dom_reflexive
typeclasses: Coq.Classes.RelationClasses.Equivalence_Reflexive
typeclasses: Coq.Classes.Equivalence.equiv_reflexive
typeclasses: Coq.Classes.Equivalence.pointwise_reflexive
typeclasses: Coq.Classes.RelationClasses.iff_Reflexive
typeclasses: Coq.Classes.RelationClasses.impl_Reflexive
typeclasses: Coq.Classes.RelationClasses.PreOrder_Reflexive
typeclasses: Coq.Arith.PeanoNat.Nat.divide_reflexive
typeclasses: Coq.Classes.RelationClasses.eq_Reflexive
typeclasses: Coq.Classes.CRelationClasses.eq_Reflexive
typeclasses: Coq.Classes.CRelationClasses.Equivalence_Reflexive
typeclasses: Coq.Classes.CRelationClasses.iff_Reflexive
typeclasses: Coq.Classes.CRelationClasses.impl_Reflexive
typeclasses: Coq.Classes.CRelationClasses.PreOrder_Reflexive
typeclasses: Coq.Classes.CMorphisms.reflexive_eq_dom_reflexive
typeclasses: Coq.Classes.CRelationClasses.iffT_Reflexive
typeclasses: Coq.Classes.CRelationClasses.arrow_Reflexive
typeclasses: Coq.Classes.RelationClasses.partial_order_antisym
typeclasses: Coq.Classes.RelationClasses.eq_Symmetric
typeclasses: Coq.Classes.RelationClasses.Equivalence_Symmetric
typeclasses: Coq.Classes.Equivalence.equiv_symmetric
typeclasses: Coq.Classes.Equivalence.pointwise_symmetric
typeclasses: Coq.Classes.RelationClasses.PER_Symmetric
typeclasses: Coq.Classes.RelationClasses.iff_Symmetric
typeclasses: Coq.Classes.RelationClasses.equivalence_rewrite_relation
typeclasses: Coq.Classes.RelationClasses.RewriteRelation_instance_2
typeclasses: Coq.Classes.RelationClasses.RewriteRelation_instance_1
typeclasses: Coq.Classes.RelationClasses.RewriteRelation_instance_0
typeclasses: Coq.Arith.PeanoNat.Nat.lt_strorder
typeclasses: Coq.Classes.CRelationClasses.equivalence_rewrite_crelation
typeclasses: Coq.Classes.CRelationClasses.RewriteRelation_instance_2
typeclasses: Coq.Classes.CRelationClasses.RewriteRelation_instance_1
typeclasses: Coq.Classes.CRelationClasses.RewriteRelation_instance_0
typeclasses: Coq.Classes.RelationClasses.Equivalence_PER
typeclasses: Top.tac2
typeclasses: Definition(Top.tac2(C_AdvancedRewrite.advancedRewrite.AC_PROP1(C_Coq.Init.Datatypes.list(C_triclass.TriDigit), f_triclass.triAdd(), f_Top.trAC_Class())))
typeclasses: AC f_triclass.triAdd
typeclasses: triclass.tac
typeclasses: Definition(triclass.tac(C_AdvancedRewrite.advancedRewrite.AC_PROP1(C_Coq.Init.Datatypes.list(C_triclass.TriDigit), f_triclass.triAdd(), f_triclass.trAC_Class())))
typeclasses: AC f_triclass.triAdd
typeclasses: Coq.Classes.RelationClasses.predicate_equivalence_equivalence
typeclasses: Coq.Classes.RelationClasses.relation_equivalence_equivalence
typeclasses: Coq.Classes.RelationClasses.eq_equivalence
typeclasses: Coq.Classes.Equivalence.pointwise_equivalence
typeclasses: Coq.Classes.RelationClasses.iff_equivalence
typeclasses: Coq.Arith.PeanoNat.Nat.eqf_equiv
typeclasses: Coq.Classes.CRelationClasses.Equivalence_PER
typeclasses: Coq.Classes.RelationClasses.relation_implication_preorder
typeclasses: Coq.Classes.RelationClasses.Equivalence_PreOrder
typeclasses: Coq.Classes.RelationClasses.predicate_implication_preorder
typeclasses: Coq.Arith.PeanoNat.Nat.le_preorder
typeclasses: Coq.Classes.CRelationClasses.relation_equivalence_equivalence
typeclasses: Coq.Classes.CRelationClasses.eq_equivalence
typeclasses: Coq.Classes.CRelationClasses.iff_equivalence
typeclasses: Coq.Classes.CRelationClasses.relation_implication_preorder
typeclasses: Coq.Classes.SetoidTactics.equivalence_default
typeclasses: Coq.Classes.CRelationClasses.partial_order_antisym
typeclasses: Coq.Classes.CRelationClasses.iffT_Symmetric
typeclasses: Coq.Classes.CRelationClasses.eq_Symmetric
typeclasses: Coq.Classes.CRelationClasses.Equivalence_Symmetric
typeclasses: Coq.Classes.CRelationClasses.PER_Symmetric
typeclasses: Coq.Classes.CRelationClasses.iff_Symmetric
typeclasses: Coq.Arith.PeanoNat.Nat.le_partialorder
typeclasses: Coq.Classes.RelationClasses.subrelation_partial_order
typeclasses: Coq.Classes.Morphisms.iff_impl_subrelation
typeclasses: Coq.Classes.Morphisms.iff_flip_impl_subrelation
typeclasses: Coq.Classes.Morphisms.pointwise_subrelation
typeclasses: Coq.Classes.RelationClasses.PER_Transitive
typeclasses: Coq.Classes.RelationClasses.PreOrder_Transitive
typeclasses: Coq.Classes.RelationClasses.iff_Transitive
typeclasses: Coq.Classes.RelationClasses.eq_Transitive
typeclasses: Coq.Classes.RelationClasses.Equivalence_Transitive
typeclasses: Coq.Classes.Equivalence.pointwise_transitive
typeclasses: Coq.Classes.Equivalence.equiv_transitive
typeclasses: Coq.Classes.RelationClasses.impl_Transitive
typeclasses: Coq.Classes.RelationClasses.StrictOrder_Transitive
typeclasses: Coq.Arith.PeanoNat.Nat.divide_transitive
typeclasses: Coq.Classes.CMorphisms.pointwise_subrelation
typeclasses: Coq.Classes.CMorphisms.iffT_arrow_subrelation
typeclasses: Coq.Classes.CMorphisms.iffT_flip_arrow_subrelation
typeclasses: Coq.Classes.CMorphisms.iff_impl_subrelation
typeclasses: Coq.Classes.CMorphisms.iff_flip_impl_subrelation
typeclasses: Coq.Classes.CMorphisms.trans_contra_co_type_morphism
typeclasses: Coq.Classes.CMorphisms.subrelation_id_proper
typeclasses: Coq.Classes.CMorphisms.proper_subrelation_proper_arrow
typeclasses: Coq.Classes.CMorphisms.trans_contra_inv_impl_type_morphism
typeclasses: Coq.Classes.CMorphisms.proper_proper
typeclasses: Coq.Classes.CMorphisms.trans_co_impl_type_morphism
typeclasses: Coq.Classes.CMorphisms.compose_proper
typeclasses: Coq.Classes.CMorphisms.trans_sym_co_inv_impl_type_morphism
typeclasses: Coq.Classes.CMorphisms.PartialOrder_proper_type
typeclasses: Coq.Classes.CMorphisms.trans_sym_contra_arrow_morphism
typeclasses: Coq.Classes.CMorphisms.respectful_morphism
typeclasses: Coq.Classes.CMorphisms.PER_type_morphism
typeclasses: Coq.Classes.CMorphisms.per_partial_app_type_morphism
typeclasses: Coq.Classes.CMorphisms.trans_co_eq_inv_arrow_morphism
typeclasses: Coq.Classes.CRelationClasses.impl_Transitive
typeclasses: Coq.Classes.CRelationClasses.StrictOrder_Transitive
typeclasses: Coq.Classes.CRelationClasses.PER_Transitive
typeclasses: Coq.Classes.CRelationClasses.PreOrder_Transitive
typeclasses: Coq.Classes.CRelationClasses.iff_Transitive
typeclasses: Coq.Classes.CRelationClasses.eq_Transitive
typeclasses: Coq.Classes.CRelationClasses.iffT_Transitive
typeclasses: Coq.Classes.CRelationClasses.arrow_Transitive
typeclasses: Coq.Classes.CRelationClasses.Equivalence_Transitive
typeclasses: Coq.Classes.RelationClasses.StrictOrder_Irreflexive
typeclasses: Coq.Classes.RelationClasses.StrictOrder_Asymmetric
typeclasses: Coq.Arith.PeanoNat.Nat.mul_wd
typeclasses: Coq.Arith.PeanoNat.Nat.mod_wd
typeclasses: Coq.Arith.PeanoNat.Nat.lor_wd
typeclasses: Coq.Arith.PeanoNat.Nat.lcm_wd
typeclasses: Coq.Arith.PeanoNat.Nat.gcd_wd
typeclasses: Coq.Arith.PeanoNat.Nat.div_wd
typeclasses: Coq.Arith.PeanoNat.Nat.add_wd
typeclasses: Coq.Arith.PeanoNat.Nat.lt_alt_wd
typeclasses: Coq.Arith.PeanoNat.Nat.Odd_wd
typeclasses: Coq.Arith.PeanoNat.Nat.pred_wd
typeclasses: Coq.Arith.PeanoNat.Nat.min_compat
typeclasses: Coq.Classes.Morphisms_Prop.iff_iff_iff_impl_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.ones_wd
typeclasses: Coq.Arith.PeanoNat.Nat.sqrt_up_wd
typeclasses: Coq.Classes.Morphisms.proper_subrelation_proper
typeclasses: Coq.Classes.Morphisms_Prop.or_iff_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.Proper_instance_0
typeclasses: Coq.Arith.PeanoNat.Nat.lxor_wd
typeclasses: Coq.Arith.PeanoNat.Nat.Private_NZSqrt.sqrt_wd
typeclasses: Coq.Arith.PeanoNat.Nat.lt_wd
typeclasses: Coq.Arith.PeanoNat.Nat.le_wd
typeclasses: Coq.Classes.Morphisms_Prop.ex_flip_impl_morphism
typeclasses: Coq.Classes.Morphisms.PartialOrder_proper
typeclasses: Coq.Arith.PeanoNat.Nat.log2_wd
typeclasses: Coq.Arith.PeanoNat.Nat.lnot_wd
typeclasses: Coq.Arith.PeanoNat.Nat.land_wd
typeclasses: Coq.Arith.PeanoNat.Nat.max_compat
typeclasses: Coq.Classes.Morphisms.subrelation_id_proper
typeclasses: Coq.Classes.Morphisms.trans_co_eq_inv_impl_morphism
typeclasses: Coq.Classes.Morphisms.trans_contra_inv_impl_morphism
typeclasses: Coq.Classes.Morphisms_Prop.and_impl_morphism
typeclasses: Coq.Classes.Morphisms.proper_proper
typeclasses: Coq.Arith.PeanoNat.Nat.recursion_wd
typeclasses: Coq.Classes.Morphisms_Prop.Acc_rel_morphism
typeclasses: Coq.Classes.Morphisms_Prop.not_iff_morphism
typeclasses: Coq.Classes.Morphisms.compose_proper
typeclasses: Coq.Classes.Morphisms.PER_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.le_alt_wd
typeclasses: Coq.Arith.PeanoNat.Nat.log2_up_wd
typeclasses: Coq.Classes.Morphisms_Prop.all_impl_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.even_wd
typeclasses: Coq.Classes.Morphisms.trans_sym_co_inv_impl_morphism
typeclasses: Coq.Classes.Morphisms.trans_sym_contra_impl_morphism
typeclasses: Coq.Classes.Morphisms_Prop.ex_iff_morphism
typeclasses: Coq.Classes.Morphisms.per_partial_app_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.testbit_wd
typeclasses: Coq.Arith.PeanoNat.Nat.div2_wd
typeclasses: Coq.Arith.PeanoNat.Nat.Bezout_wd
typeclasses: Coq.Classes.Morphisms.respectful_morphism
typeclasses: Coq.Classes.Morphisms.trans_co_impl_morphism
typeclasses: Coq.Classes.Morphisms.trans_contra_co_morphism
typeclasses: Coq.Classes.Morphisms_Prop.Acc_pt_morphism
typeclasses: Coq.Classes.Morphisms_Prop.all_iff_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.divide_wd
typeclasses: Coq.Arith.PeanoNat.Nat.ldiff_wd
typeclasses: Coq.Classes.Morphisms_Prop.not_impl_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.eqb_compat
typeclasses: Coq.Classes.Morphisms_Prop.ex_impl_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.b2n_proper
typeclasses: Coq.Classes.Morphisms_Prop.and_iff_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.clearbit_wd
typeclasses: Coq.Arith.PeanoNat.Nat.shiftr_wd
typeclasses: Coq.Arith.PeanoNat.Nat.shiftl_wd
typeclasses: Coq.Arith.PeanoNat.Nat.setbit_wd
typeclasses: Coq.Arith.PeanoNat.Nat.succ_wd
typeclasses: Coq.Arith.PeanoNat.Nat.Even_wd
typeclasses: Coq.Classes.Morphisms_Prop.or_impl_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.testbit_eqf
typeclasses: Coq.Classes.Morphisms_Prop.well_founded_morphism
typeclasses: Coq.Arith.PeanoNat.Nat.sub_wd
typeclasses: Coq.Arith.PeanoNat.Nat.pow_wd
typeclasses: Coq.Arith.PeanoNat.Nat.odd_wd
typeclasses: Coq.Classes.Morphisms_Prop.all_flip_impl_morphism
typeclasses: Coq.Classes.CRelationClasses.StrictOrder_Irreflexive
typeclasses: Coq.Classes.CRelationClasses.StrictOrder_Asymmetric
typeclasses: Coq.Classes.Morphisms.reflexive_eq_dom_reflexive
typeclasses: Coq.Classes.RelationClasses.Equivalence_Reflexive
typeclasses: Coq.Classes.Equivalence.equiv_reflexive
typeclasses: Coq.Classes.Equivalence.pointwise_reflexive
typeclasses: Coq.Classes.RelationClasses.iff_Reflexive
typeclasses: Coq.Classes.RelationClasses.impl_Reflexive
typeclasses: Coq.Classes.RelationClasses.PreOrder_Reflexive
typeclasses: Coq.Arith.PeanoNat.Nat.divide_reflexive
typeclasses: Coq.Classes.RelationClasses.eq_Reflexive
typeclasses: Coq.Classes.CRelationClasses.eq_Reflexive
typeclasses: Coq.Classes.CRelationClasses.Equivalence_Reflexive
typeclasses: Coq.Classes.CRelationClasses.iff_Reflexive
typeclasses: Coq.Classes.CRelationClasses.impl_Reflexive
typeclasses: Coq.Classes.CRelationClasses.PreOrder_Reflexive
typeclasses: Coq.Classes.CMorphisms.reflexive_eq_dom_reflexive
typeclasses: Coq.Classes.CRelationClasses.iffT_Reflexive
typeclasses: Coq.Classes.CRelationClasses.arrow_Reflexive
typeclasses: Coq.Classes.RelationClasses.partial_order_antisym
typeclasses: Coq.Classes.RelationClasses.eq_Symmetric
typeclasses: Coq.Classes.RelationClasses.Equivalence_Symmetric
typeclasses: Coq.Classes.Equivalence.equiv_symmetric
typeclasses: Coq.Classes.Equivalence.pointwise_symmetric
typeclasses: Coq.Classes.RelationClasses.PER_Symmetric
typeclasses: Coq.Classes.RelationClasses.iff_Symmetric

2 subgoals
  
  ============================
  False

subgoal 2 is:
 False = (1 + 1 = 3)

x < 
Coq < 
