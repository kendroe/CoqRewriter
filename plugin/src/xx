Test 1:apply(f, e)
Test 2:(fn x => x + 2)
Test 3:apply((fn x => nplus(x, 3)), 4)
Test 4: 7
Test 5: (fn x => apply(f(e), x))
Test 6: f(e)
Test 7: 1#2 * x
Test 9: 1 * x
Test 11: 1 * 1#2
Test 13: nplus(ntimes(x, 2), 3) == 9
listGetVType
Test 14: x == 3
Test 15: nless(nplus(ntimes(x, 2), 3), 9)
Test 16: nless(x, 3)
Test 17: nless(9, nplus(ntimes(x, 2), 3))
Test 18: nless(3, x)
exp_test: nplus(x, 3) == nplus(y, 4)
exp_res: x == nplus(y, 1)
exp_test: nplus(x, 5) == nplus(y, 4)
exp_res: y == nplus(x, 1)
exp_test: ntimes(x, 3) == ntimes(y, 4)
exp_res: ntimes(x, 3) == ntimes(y, 4)
exp_test: ntimes(x, 2) == ntimes(y, 4)
exp_res: x == ntimes(y, 2)
exp_test: ntimes(x, 4) == ntimes(y, 2)
exp_res: y == ntimes(x, 2)
exp_test: ntimes(x, 9) == ntimes(y, 6)
exp_res: ntimes(x, 3) == ntimes(y, 2)
exp_test: ntimes(x, 6) == ntimes(y, 9)
exp_res: ntimes(x, 2) == ntimes(y, 3)
exp_test: 6 == nplus(x, 9)
exp_res: 0 == nplus(x, 3)
exp_test: 9 == nplus(x, 5)
listGetVType
exp_res: x == 4
exp_test: nplus(x, 9) == 6
exp_res: 0 == nplus(x, 3)
exp_test: nplus(x, 5) == 9
listGetVType
exp_res: x == 4
exp_test: ntimes(x, 9) == 6
exp_res: 2 == ntimes(x, 3)
exp_test: ntimes(x, 6) == 9
exp_res: 3 == ntimes(x, 2)
exp_test: ntimes(x, 5) == 9
exp_res: 9 == ntimes(x, 5)
exp_test: ntimes(x, 3) == 9
listGetVType
exp_res: x == 3
exp_test: 6 == ntimes(x, 9)
exp_res: 2 == ntimes(x, 3)
exp_test: 9 == ntimes(x, 6)
exp_res: 3 == ntimes(x, 2)
exp_test: 9 == ntimes(x, 5)
exp_res: 9 == ntimes(x, 5)
exp_test: 9 == ntimes(x, 3)
listGetVType
exp_res: x == 3
exp_test: y == ntimes(x, 3, y)
exp_res: 1 == ntimes(x, 3)
exp_test: ntimes(x, 3, y) == y
exp_res: 1 == ntimes(x, 3)
exp_test: y == nplus(x, 3, y)
exp_res: 0 == nplus(x, 3)
exp_test: nplus(x, 3, y) == y
exp_res: 0 == nplus(x, 3)
exp_test: ntimes(x, 3, y) == nplus(x, 3, ntimes(x, 3, y))
exp_res: 0 == nplus(x, 3)
exp_test: nplus(x, 3, ntimes(x, 3, y)) == ntimes(x, 3, y)
exp_res: 0 == nplus(x, 3)
exp_test: nless(nplus(x, 3), nplus(y, 4))
exp_res: nless(x, nplus(y, 1))
exp_test: nless(nplus(x, 5), nplus(y, 4))
exp_res: nless(nplus(x, 1), y)
exp_test: nless(ntimes(x, 3), ntimes(y, 4))
exp_res: nless(ntimes(x, 3), ntimes(y, 4))
exp_test: nless(ntimes(x, 2), ntimes(y, 4))
exp_res: nless(x, ntimes(y, 2))
exp_test: nless(ntimes(x, 4), ntimes(y, 2))
exp_res: nless(ntimes(x, 2), y)
exp_test: nless(ntimes(x, 9), ntimes(y, 6))
exp_res: nless(ntimes(x, 3), ntimes(y, 2))
exp_test: nless(nplus(x, 9), 6)
exp_res: nless(nplus(x, 3), 0)
exp_test: nless(nplus(x, 5), 9)
exp_res: nless(x, 4)
exp_test: nless(ntimes(x, 9), 6)
exp_res: nless(ntimes(x, 3), 2)
exp_test: nless(ntimes(x, 6), 9)
exp_res: nless(ntimes(x, 2), 3)
exp_test: nless(ntimes(x, 5), 9)
exp_res: nless(ntimes(x, 5), 9)
exp_test: nless(ntimes(x, 3), nminus(0, 9))
exp_res: nless(x, -3)
exp_test: nless(6, nplus(x, 9))
exp_res: nless(0, nplus(x, 3))
exp_test: nless(9, nplus(x, 5))
exp_res: nless(4, x)
exp_test: nless(6, ntimes(x, 9))
exp_res: nless(2, ntimes(x, 3))
exp_test: nless(9, ntimes(x, 6))
exp_res: nless(3, ntimes(x, 2))
exp_test: nless(9, ntimes(x, 5))
exp_res: nless(9, ntimes(x, 5))
exp_test: nless(nminus(0, 9), ntimes(x, 3))
exp_res: nless(-3, x)
exp_test: rless(rminus(0#1, 9#1), rtimes(x, 3#1))
exp_res: rless(rtimes(x, -1#3), 1#1)
exp_test: 0#1 == rtimes(x, 3#1)
listGetVType
exp_res: x == 0#1
exp_test: 0#1 == rplus(x, 3#1)
exp_res: 0#1 == rplus(x, 3#1)
exp_test: rplus(1#1, x) == rplus(y, 3#1)
exp_res: x == nplus(y, 2#1)
exp_test: rplus(1#3, x) == rplus(y, 3#1)
exp_res: x == nplus(y, 8#3)
exp_test: rplus(3#1, x) == rplus(y, 1#3)
exp_res: y == nplus(x, 8#3)
exp_test: rless(rtimes(rminus(0#1, 3#1), x), rtimes(y, 1#9))
exp_res: rless(rtimes(y, -1#27), x)
exp_test: x  == 3 & y  == nplus(x, 1)
listGetVType
listGetVType
listGetVType
listGetVType
exp_res: x  == 3 & y  == 4
exp_test: EXISTS(x) y == nplus(z, 1)
exp_res: EXISTS(x) y == nplus(z, 1)
exp_test: EXISTS(y) not(y == nplus(z, 1))
exp_res: not(ALL(y: True) y == nplus(z, 1))
exp_test: ALL(x: True) y == nplus(z, 1)
exp_res: y == nplus(z, 1)
exp_test: ALL(y: True) not(y == nplus(z, 1))
exp_res: False
exp_test: EXISTS(x) x  == ntimes(q, r) & y  == nplus(x, 1)
exp_res: EXISTS(x) y == nplus(1, ntimes(q, r))
exp_test: EXISTS(x) x == ntimes(q, r)
exp_res: True
exp_test: (CASE x OF 0 => 1 ||| 1 => 2)
exp_res: (CASE x OF 0 => 1 ||| 1 => 2)
exp_test: (CASE True OF True => 1 ||| False => 2)
exp_res: 1
listGetTDefexp_test: (CASE Nil OF Nil => nplus(1, 10) ||| Cons(a, b) => 2)
exp_res: (CASE Nil OF Nil => 11 ||| Cons(a, b) => 2)
exp_test: append([2], 3)
exp_res: Cons(2, 3)
exp_test: append(append(a, [1]), c)
exp_res: append(a, Cons(1, c))
exp_test: nplus(yin(x), yan(x))
exp_res: 4
exp_test: nplus(yin(x), yan(nplus(x, 1)))
exp_res: nplus(yin(x), yan(nplus(x, 1)))
exp_test: nplus(yin(3), yan(4))
exp_res: nplus(yin(3), yan(4))
exp_test: nplus(yin(x), 5, yan(x), 3)
exp_res: 12
exp_test: nplus(yan(x), 5, yin(x), 3)
exp_res: 12
exp_test: nless(3, 5) & nless(5, 3)
exp_res: False
exp_test: nless(x, y) & nless(y, x)
exp_res: False
exp_test: nless(5, y) & nless(y, 3)
exp_res: False
exp_test: nless(x, y)  & nless(y, z) & nless(z, x)
exp_res: False
exp_test: nless(2, y) & nless(y, 10)
exp_res: nless(2, y) & nless(y, 10)
exp_test: implies(True, y)
exp_res: y
exp_test: implies(False, y)
exp_res: True
exp_test: implies(y, False)
exp_res: not(y)
exp_test: implies(x == 3, nless(x, 5))
exp_res: implies(x == 3, True)
exp_test: implies(x == 3, True)
exp_res: True
exp_test: f(x)  == x & f(f(x))  == x
listGetVType
listGetVType
exp_res: x == f(x)
