rewriting subterm: nless(x, y)  & nless(y, z) & nless(z, x)
  rewriting expression: nless(x, y)  & nless(y, z) & nless(z, x)
    Deriving nless(z', x') { True } -> True
      d nless(z', x') { N[True] } -> N[True]
      Result:
        N[nless(z', x')] { N[True] } -> N[True]
    end derive for: nless(z', x') { True } -> True
    Deriving nless(x', y') & nless(y', z') { True } -> True
      d nless(x', y') & nless(y', z') { N[True] } -> N[True]
      d nless(x', y') { N[True] } -> N[True]
      d nless(y', z') { N[True] } -> N[True]
      Result:
        N[nless(x', y')] { N[True] } -> N[True]
        N[nless(y', z')] { N[True] } -> N[True]
    end derive for: nless(x', y') & nless(y', z') { True } -> True
    rewriting expression: <<177>> & <<199>>
      Deriving nless(y', z') { True } -> True
        d nless(y', z') { N[True] } -> N[True]
        Result:
          N[nless(y', z')] { N[True] } -> N[True]
      end derive for: nless(y', z') { True } -> True
      rewriting expression: nless(<<1>>, <<2>>)
        rewriting expression: y
          builtin y
          end builtin y
          Rules:
          Result:
            <<1>>
            y
        end rewrite for: y
        rewriting expression: z
          builtin z
          end builtin z
          Rules:
          Result:
            <<2>>
            z
        end rewrite for: z
        builtin nless(<<1>>, <<2>>)
        end builtin nless(y, z)
        Rules:
          nless(x', y') { True } -> True
          nless(z', x') { True } -> True
          nless(x, x) { True } -> False
        match nless(x', y') nless(y, z)
        end match nless(x', y') nless(y, z)
        match nless(z', x') nless(y, z)
        end match nless(z', x') nless(y, z)
        match nless(x, x) nless(y, z)
          equal y z
          equal: No
        end match nless(x, x) nless(y, z)
        Result:
          <<177>>
      end rewrite for: nless(<<1>>, <<2>>)
      equal <<177>> nless(<<1>>, <<2>>)
      equal: Yes
      rewriting expression: nless(<<4>>, <<1>>)
        rewriting expression: x
          builtin x
          end builtin x
          Rules:
          Result:
            <<4>>
            x
        end rewrite for: x
        rewriting expression: y
          builtin y
          end builtin y
          Rules:
          Result:
            <<1>>
            y
        end rewrite for: y
        builtin nless(<<4>>, <<1>>)
        end builtin nless(x, y)
        Rules:
          nless(y', z') { True } -> True
          nless(z', x') { True } -> True
          nless(x, x) { True } -> False
        match nless(y', z') nless(x, y)
        end match nless(y', z') nless(x, y)
        match nless(z', x') nless(x, y)
        end match nless(z', x') nless(x, y)
        match nless(x, x) nless(x, y)
          equal x y
          equal: No
        end match nless(x, x) nless(x, y)
        Result:
          <<199>>
      end rewrite for: nless(<<4>>, <<1>>)
      equal <<199>> nless(<<4>>, <<1>>)
      equal: Yes
      rewriting expression: <<177>>
        Result:
          <<177>>
      end rewrite for: <<177>>
      equal <<177>> <<177>>
      equal: Yes
      rewriting expression: <<199>>
        Result:
          <<199>>
      end rewrite for: <<199>>
      equal <<199>> <<199>>
      equal: Yes
      builtin nless(y, z) & nless(x, y)
      end builtin nless(<<1>>, <<2>>) & nless(<<4>>, <<1>>)
      Rules:
        nless(x, y) & nless(y, x) { True } -> False
      match nless(x, y) & nless(y, x) nless(y, z) & nless(x, y)
        equal z x
        equal: No
        equal y y
        equal: Yes
        equal x z
        equal: No
      end match nless(x, y) & nless(y, x) nless(y, z) & nless(x, y)
      Result:
        <<586>>
    end rewrite for: <<177>> & <<199>>
    equal <<586>> <<177>> & <<199>>
    equal: Yes
    rewriting expression: nless(<<2>>, <<4>>)
      rewriting expression: z
        builtin z
        end builtin z
        Rules:
        Result:
          <<2>>
          z
      end rewrite for: z
      rewriting expression: x
        Result:
          <<4>>
          x
      end rewrite for: x
      builtin nless(<<2>>, <<4>>)
      end builtin nless(z, x)
      Rules:
        nless(y', z') { True } -> True
        nless(x', y') { True } -> True
        nless(x, x) { True } -> False
      match nless(y', z') nless(z, x)
      end match nless(y', z') nless(z, x)
      match nless(x', y') nless(z, x)
      end match nless(x', y') nless(z, x)
      match nless(x, x) nless(z, x)
        equal z x
        equal: No
      end match nless(x, x) nless(z, x)
      Result:
        <<587>>
    end rewrite for: nless(<<2>>, <<4>>)
    equal <<587>> nless(<<2>>, <<4>>)
    equal: Yes
    rewriting expression: <<586>>
      Result:
        <<586>>
    end rewrite for: <<586>>
    equal <<586>> <<586>>
    equal: Yes
    rewriting expression: <<587>>
      Result:
        <<587>>
    end rewrite for: <<587>>
    equal <<587>> <<587>>
    equal: Yes
    builtin nless(y, z) & nless(x, y) & nless(z, x)
    end builtin nless(<<1>>, <<2>>) & nless(<<4>>, <<1>>) & nless(<<2>>, <<4>>)
    Rules:
      nless(x, y) & nless(y, x) { True } -> False
    match nless(x, y) & nless(y, x) nless(y, z) & nless(x, y) & nless(z, x)
      equal z z
      equal: Yes
      equal y x
      equal: No
      equal z x
      equal: No
      equal y z
      equal: No
      equal y y
      equal: Yes
      equal x z
      equal: No
      equal x x
      equal: Yes
      equal z y
      equal: No
      equal x y
      equal: No
    end match nless(x, y) & nless(y, x) nless(y, z) & nless(x, y) & nless(z, x)
    KB Rewriting nless(<<1>>, <<2>>) & nless(<<4>>, <<1>>) & nless(<<2>>, <<4>>) 3 3
      term nless(<<1>>, <<2>>)
      term nless(<<4>>, <<1>>)
      term nless(<<2>>, <<4>>)
      exp_term nless(<<1>>, <<2>>)
      exp_term nless(<<4>>, <<1>>)
      exp_term nless(<<2>>, <<4>>)
      all_term nless(<<1>>, <<2>>)
      all_term nless(<<4>>, <<1>>)
      all_term nless(<<2>>, <<4>>)
      Operator PO nless ==
      terms nless(<<1>>, <<2>>)
      terms nless(<<4>>, <<1>>)
      terms nless(<<2>>, <<4>>)
          Cycle
      Elaboration
      elaborate term = nless(<<1>>, <<2>>)
      elaborate term = nless(<<4>>, <<1>>)
      elaborate term = nless(<<2>>, <<4>>)
      elaborate term2 = nless(<<1>>, <<2>>)
      elaborate term2 = nless(<<4>>, <<1>>)
      elaborate term2 = nless(<<2>>, <<4>>)
      closure_terms nless(<<1>>, <<2>>) nless(<<1>>, <<2>>)
      oper PO nless ==
      closure_terms nless(<<1>>, <<2>>) nless(<<2>>, <<4>>)
      oper PO nless ==
      closure_terms nless(<<1>>, <<2>>) nless(<<1>>, <<2>>)
      oper PO nless ==
      closure_terms nless(<<1>>, <<2>>) nless(<<4>>, <<1>>)
      oper PO nless ==
      closure_terms nless(<<4>>, <<1>>) nless(<<1>>, <<2>>)
      oper PO nless ==
      closure_terms nless(<<4>>, <<1>>) nless(<<4>>, <<1>>)
      oper PO nless ==
      closure_terms nless(<<4>>, <<1>>) nless(<<4>>, <<1>>)
      oper PO nless ==
      closure_terms nless(<<4>>, <<1>>) nless(<<2>>, <<4>>)
      oper PO nless ==
      closure_terms nless(<<2>>, <<4>>) nless(<<4>>, <<1>>)
      oper PO nless ==
      closure_terms nless(<<2>>, <<4>>) nless(<<2>>, <<4>>)
      oper PO nless ==
      closure_terms nless(<<2>>, <<4>>) nless(<<1>>, <<2>>)
      oper PO nless ==
      closure_terms nless(<<2>>, <<4>>) nless(<<2>>, <<4>>)
      oper PO nless ==
          Cycle
          b nless(<<4>>, <<2>>)
          b nless(<<1>>, <<4>>)
          b nless(<<2>>, <<1>>)
          b nless(<<4>>, <<2>>)
          b nless(<<1>>, <<4>>)
          b nless(<<2>>, <<1>>)
          a nless(<<1>>, <<4>>)
          a nless(<<4>>, <<2>>)
          a nless(<<2>>, <<1>>)
      ta1 count = 6
          ta1 = nless(<<1>>, <<2>>)
          ta1 = nless(<<1>>, <<4>>)
          ta1 = nless(<<2>>, <<1>>)
          ta1 = nless(<<2>>, <<4>>)
          ta1 = nless(<<4>>, <<1>>)
          ta1 = nless(<<4>>, <<2>>)
          t2 = False
          t2 = nless(<<2>>, <<1>>)
          t2 = nless(<<4>>, <<1>>)
          t2 = nless(<<4>>, <<2>>)
      Elaboration
          t = False

          t = nless(<<2>>, <<1>>)

          t = nless(<<4>>, <<1>>)

          t = nless(<<4>>, <<2>>)

      results2 False
      results2 nless(<<2>>, <<1>>)
      results2 nless(<<4>>, <<1>>)
      results2 nless(<<4>>, <<2>>)
      False case
      Results: nless(<<1>>, <<2>>) & nless(<<4>>, <<1>>) & nless(<<2>>, <<4>>)
        False
    comparing False nless(<<1>>, <<2>>) & nless(<<4>>, <<1>>) & nless(<<2>>, <<4>>)
    rewriting expression: False
      Result:
        <<51>>
    end rewrite for: False
    Result:
      <<51>>
      False
  end rewrite for: nless(x, y)  & nless(y, z) & nless(z, x)
  Result:
    <<51>>
    False
end rewrite subterm: nless(x, y)  & nless(y, z) & nless(z, x)
rewriting subterm: nless(2, y) & nless(y, 10)
  rewriting expression: nless(2, y) & nless(y, 10)
    Deriving nless(y', 10) { True } -> True
      d nless(y', 10) { N[True] } -> N[True]
      Result:
        N[nless(y', 10)] { N[True] } -> N[True]
    end derive for: nless(y', 10) { True } -> True
    Deriving nless(2, y') { True } -> True
      d nless(2, y') { N[True] } -> N[True]
      Result:
        N[nless(2, y')] { N[True] } -> N[True]
    end derive for: nless(2, y') { True } -> True
    rewriting expression: nless(<<269>>, <<1>>)
      rewriting expression: 2
        builtin 2
        end builtin 2
        Rules:
        Result:
          <<269>>
          2
      end rewrite for: 2
      rewriting expression: y
        builtin y
        end builtin y
        Rules:
        Result:
          <<1>>
          y
      end rewrite for: y
      builtin nless(<<269>>, <<1>>)
      end builtin nless(2, y)
      Rules:
        nless(y', 10) { True } -> True
        nless(x, x) { True } -> False
      match nless(y', 10) nless(2, y)
      end match nless(y', 10) nless(2, y)
      match nless(x, x) nless(2, y)
        equal 2 y
        equal: No
      end match nless(x, x) nless(2, y)
      Result:
        <<598>>
    end rewrite for: nless(<<269>>, <<1>>)
    equal <<598>> nless(<<269>>, <<1>>)
    equal: Yes
    rewriting expression: nless(<<1>>, <<527>>)
      rewriting expression: y
        builtin y
        end builtin y
        Rules:
        Result:
          <<1>>
          y
      end rewrite for: y
      rewriting expression: 10
        builtin 10
        end builtin 10
        Rules:
        Result:
          <<527>>
          10
      end rewrite for: 10
      builtin nless(<<1>>, <<527>>)
      end builtin nless(y, 10)
      Rules:
        nless(2, y') { True } -> True
        nless(x, x) { True } -> False
      match nless(2, y') nless(y, 10)
      end match nless(2, y') nless(y, 10)
      match nless(x, x) nless(y, 10)
        equal y 10
        equal: No
      end match nless(x, x) nless(y, 10)
      Result:
        <<599>>
    end rewrite for: nless(<<1>>, <<527>>)
    equal <<599>> nless(<<1>>, <<527>>)
    equal: Yes
    rewriting expression: <<598>>
      Result:
        <<598>>
    end rewrite for: <<598>>
    equal <<598>> <<598>>
    equal: Yes
    rewriting expression: <<599>>
      Result:
        <<599>>
    end rewrite for: <<599>>
    equal <<599>> <<599>>
    equal: Yes
    builtin nless(2, y) & nless(y, 10)
    end builtin nless(<<269>>, <<1>>) & nless(<<1>>, <<527>>)
    Rules:
      nless(x, y) & nless(y, x) { True } -> False
    match nless(x, y) & nless(y, x) nless(2, y) & nless(y, 10)
      equal y y
      equal: Yes
      equal 2 10
      equal: No
      equal 10 2
      equal: No
    end match nless(x, y) & nless(y, x) nless(2, y) & nless(y, 10)
    KB Rewriting nless(<<269>>, <<1>>) & nless(<<1>>, <<527>>) 2 2
      term nless(<<269>>, <<1>>)
      term nless(<<1>>, <<527>>)
      exp_term nless(<<269>>, <<1>>)
      exp_term nless(<<1>>, <<527>>)
      all_term nless(<<269>>, <<1>>)
      all_term nless(<<1>>, <<527>>)
      cond_term2 2 < 10
      cond_term2 preceq(2, 10)
      Operator PO nless ==
      cond_term 2 < 10
      cond_term preceq(2, 10)
      terms nless(<<269>>, <<1>>)
      terms nless(<<1>>, <<527>>)
      elaborate term = <<269>> < <<527>>
      elaborate term = preceq(<<269>>, <<527>>)
      elaborate term2 = <<269>> < <<527>>
      elaborate term2 = preceq(<<269>>, <<527>>)
      closure_terms <<269>> < <<527>> preceq(<<269>>, <<527>>)
      oper PO nless ==
      closure_terms <<269>> < <<527>> preceq(<<269>>, <<527>>)
      oper PO nless ==
      closure_terms preceq(<<269>>, <<527>>) preceq(<<269>>, <<527>>)
      oper PO nless ==
      closure_terms preceq(<<269>>, <<527>>) preceq(<<269>>, <<527>>)
      oper PO nless ==
          Cycle
      Elaboration
          t = preceq(<<269>>, <<527>>)

      elaborate term = nless(<<269>>, <<1>>)
      elaborate term = nless(<<1>>, <<527>>)
      elaborate term = <<269>> < <<527>>
      elaborate term = preceq(<<269>>, <<527>>)
      elaborate term2 = nless(<<269>>, <<1>>)
      elaborate term2 = nless(<<1>>, <<527>>)
      elaborate term2 = <<269>> < <<527>>
      elaborate term2 = preceq(<<269>>, <<527>>)
      closure_terms nless(<<269>>, <<1>>) nless(<<269>>, <<1>>)
      oper PO nless ==
      closure_terms nless(<<269>>, <<1>>) nless(<<1>>, <<527>>)
      oper PO nless ==
      closure_terms nless(<<269>>, <<1>>) nless(<<269>>, <<1>>)
      oper PO nless ==
      closure_terms nless(<<269>>, <<1>>) preceq(<<269>>, <<527>>)
      oper PO nless ==
      closure_terms nless(<<1>>, <<527>>) nless(<<1>>, <<527>>)
      oper PO nless ==
      closure_terms nless(<<1>>, <<527>>) preceq(<<269>>, <<527>>)
      oper PO nless ==
      closure_terms nless(<<1>>, <<527>>) nless(<<269>>, <<1>>)
      oper PO nless ==
      closure_terms nless(<<1>>, <<527>>) nless(<<1>>, <<527>>)
      oper PO nless ==
      closure_terms <<269>> < <<527>> nless(<<1>>, <<527>>)
      oper PO nless ==
      closure_terms <<269>> < <<527>> preceq(<<269>>, <<527>>)
      oper PO nless ==
      closure_terms <<269>> < <<527>> nless(<<269>>, <<1>>)
      oper PO nless ==
      closure_terms <<269>> < <<527>> preceq(<<269>>, <<527>>)
      oper PO nless ==
      closure_terms preceq(<<269>>, <<527>>) nless(<<1>>, <<527>>)
      oper PO nless ==
      closure_terms preceq(<<269>>, <<527>>) preceq(<<269>>, <<527>>)
      oper PO nless ==
      closure_terms preceq(<<269>>, <<527>>) nless(<<269>>, <<1>>)
      oper PO nless ==
      closure_terms preceq(<<269>>, <<527>>) preceq(<<269>>, <<527>>)
      oper PO nless ==
          Cycle
          b nless(<<269>>, <<527>>)
          b nless(<<269>>, <<527>>)
          a nless(<<269>>, <<527>>)
      ta1 count = 4
          ta1 = nless(<<1>>, <<527>>)
          ta1 = nless(<<269>>, <<1>>)
          ta1 = nless(<<269>>, <<527>>)
          ta1 = preceq(<<269>>, <<527>>)
          t2 = nless(<<1>>, <<527>>)
          t2 = nless(<<269>>, <<1>>)
          t2 = nless(<<269>>, <<527>>)
      closure_terms nless(<<269>>, <<527>>) nless(<<1>>, <<527>>)
      oper PO nless ==
      closure_terms nless(<<269>>, <<527>>) nless(<<269>>, <<527>>)
      oper PO nless ==
      closure_terms nless(<<269>>, <<527>>) nless(<<269>>, <<1>>)
      oper PO nless ==
      closure_terms nless(<<269>>, <<527>>) nless(<<269>>, <<527>>)
      oper PO nless ==
          Cycle
      Elaboration
          t = nless(<<1>>, <<527>>)

          t = nless(<<269>>, <<1>>)

          t = nless(<<269>>, <<527>>)

      results1 preceq(<<269>>, <<527>>)
      results2 nless(<<1>>, <<527>>)
      results2 nless(<<269>>, <<1>>)
      results2 nless(<<269>>, <<527>>)
      Default case
      return nless(<<269>>, <<1>>)
      return nless(<<1>>, <<527>>)
      Results: nless(<<269>>, <<1>>) & nless(<<1>>, <<527>>)
        nless(<<269>>, <<1>>) & nless(<<1>>, <<527>>)
    Result:
      <<600>>
      nless(2, y) & nless(y, 10)
  end rewrite for: nless(2, y) & nless(y, 10)
  Result:
    <<600>>
    nless(2, y) & nless(y, 10)
end rewrite subterm: nless(2, y) & nless(y, 10)
rewriting subterm: implies(True, y)
  rewriting expression: implies(True, y)
    Result:
      <<1>>
      y
  end rewrite for: implies(True, y)
  Result:
    <<1>>
    y
end rewrite subterm: implies(True, y)
rewriting subterm: implies(False, y)
  rewriting expression: implies(False, y)
    Result:
      <<19>>
      True
  end rewrite for: implies(False, y)
  Result:
    <<19>>
    True
end rewrite subterm: implies(False, y)
rewriting subterm: implies(y, False)
  rewriting expression: implies(y, False)
    Result:
      <<611>>
      not(y)
  end rewrite for: implies(y, False)
  Result:
    <<611>>
    not(y)
end rewrite subterm: implies(y, False)
rewriting subterm: implies(x == 3, nless(x, 5))
  rewriting expression: implies(x == 3, nless(x, 5))
    rewriting expression: <<4>> == <<257>>
      Result:
        <<280>>
        x == 3
    end rewrite for: <<4>> == <<257>>
    Adding nless(<<4>>, <<296>>)

    rewriting expression: nless(<<4>>, <<296>>)
      rewriting expression: x
        builtin x
        end builtin x
        Rules:
          x' { True } -> 3
        match x' x
        end match x' x
        Applying x' { True } -> 3 to x
          Match count: 1
          Match2 count: 1
          Match3 count: 1
          rewriting subterm: True
            rewriting expression: True
              Result:
                <<19>>
                True
            end rewrite for: True
            Result:
              <<19>>
              True
          end rewrite subterm: True
          r: 3
          Result count: 1
        End apply x' { True } -> 3 to x
        rewriting expression: 3
          Result:
            <<257>>
            3
        end rewrite for: 3
        Result:
          <<257>>
          3
      end rewrite for: x
      rewriting expression: 5
        builtin 5
        end builtin 5
        Rules:
        Result:
          <<296>>
          5
      end rewrite for: 5
      builtin nless(<<257>>, <<296>>)
        True
      end builtin True
      rewriting expression: True
        Result:
          <<19>>
          True
      end rewrite for: True
      Result:
        <<19>>
        True
    end rewrite for: nless(<<4>>, <<296>>)
    builtin implies(<<280>>, <<19>>)
    end builtin implies(<<4>> == <<257>>, True)
    Rules:
    Result:
      <<614>>
      implies(x == 3, True)
  end rewrite for: implies(x == 3, nless(x, 5))
  Result:
    <<614>>
    implies(x == 3, True)
end rewrite subterm: implies(x == 3, nless(x, 5))
